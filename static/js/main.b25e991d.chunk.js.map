{"version":3,"sources":["component/Cards/Cards.jsx","Api/index.js","component/Chart/Chart.jsx","component/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","component/CountryPicker/CountryPicker.module.css","component/Cards/Cards.module.css","component/Chart/Chart.module.css","imagees/cvdup2.png","logo.svg"],"names":["Cards","apidata","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Container","fixed","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","infected_color","Typography","variant","gutterBottom","start","end","value","duration","separator","color","Date","toDateString","sihalafont","recoverd","recoverd_color","deaths_color","url","fetchData","country","a","changebalurl","axios","get","data","fetchDalyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","disply","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchCountryApi","FormControl","formControl","NativeSelect","defaultChecked","onChange","e","target","style","i","key","App","fetchedData","setState","state","this","src","coronaImage","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.b25e991d.chunk.js","sourcesContent":["import React from \"react\"\r\nimport {Card, CardContent, Typography, Grid, Container, StylesProvider} from '@material-ui/core';\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\n\r\nimport styles from './Cards.module.css'\r\n\r\n\r\nconst Cards =  ({apidata:{confirmed, recovered, deaths, lastUpdate}}) => {\r\n        \r\n    console.log()\r\n\r\n    if (!confirmed) {\r\n        return 'Loding.....'\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Container fixed>\r\n                <Grid container spacing={3} justify=\"center\">\r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                        <CardContent className={cx(styles.infected_color)}>\r\n                            <Typography variant=\"h5\" className={cx(styles.infected_color)}  gutterBottom>\r\n                            ආසාදිතයින් (Infected)\r\n                            </Typography>   \r\n                            <hr></hr>                         \r\n                            <Typography variant=\"h5\">\r\n                            <CountUp \r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />   \r\n                            </Typography>\r\n                            <Typography color=\"\">\r\n                                {new Date(lastUpdate).toDateString()}\r\n                            </Typography>\r\n                            <hr></hr>\r\n                            <Typography variant=\"body2\">\r\n                                <span className={cx(styles.sihalafont)}>Covid 19 ආසාදිත රෝගීන් සංඛ්‍යාව</span> <br />\r\n                                (Number of active cases of covid 19))\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recoverd)}>\r\n                        <CardContent className={cx(styles.recoverd_color)}>\r\n                            <Typography  variant=\"h5\">\r\n                            සුව වූ රෝගීන් (Recovered)\r\n                            </Typography>\r\n                            <hr></hr>\r\n                            <Typography variant=\"h5\">\r\n                            <CountUp \r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />   \r\n                            </Typography>\r\n                            <Typography color=\"\">\r\n                                {new Date(lastUpdate).toDateString()}\r\n                            </Typography>   \r\n                            <hr></hr>                   \r\n                            <Typography variant=\"body2\">\r\n                                 <span className={cx(styles.sihalafont)}>Covid 19 රෝගයෙන් සුවය ලැබූ සංඛ්‍යා</span> <br />\r\n                               ( Number of recoverd from covid 19)\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                        <CardContent className={cx(styles.deaths_color)}>\r\n                            <Typography variant=\"h5\" color=\"\">\r\n                            මරණ <br />\r\n                            (Death)\r\n                            </Typography>\r\n                            <hr></hr>\r\n                            <Typography variant=\"h5\">\r\n                            <CountUp \r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />   \r\n                            </Typography>\r\n                            <Typography color=\"\">\r\n                                {new Date(lastUpdate).toDateString()}\r\n                            </Typography>  \r\n                            <hr></hr>                    \r\n                            <Typography variant=\"body2\">\r\n                              <span className={cx(styles.sihalafont)} variant=\"h4\">Covid 19 හේතුවෙන් මිය ගිය සංඛ්‍යාව</span><br />\r\n                               ( Number of deaths caused by covid 19)\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n                </Grid>          \r\n            </Container>\r\n        </div>\r\n \r\n    )\r\n}\r\n\r\nexport default Cards","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\"\r\n\r\nexport const fetchData = async(country) =>{\r\n    let changebalurl = url\r\n\r\n    if (country) {\r\n        \r\n        changebalurl = `${url}/countries/${country}`\r\n    }\r\n\r\n    try {\r\n        const {data:{confirmed, recovered, deaths, lastUpdate}} = await axios.get(changebalurl)\r\n        return {confirmed, recovered, deaths, lastUpdate}\r\n        \r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchDalyData = async() =>{\r\n    try {\r\n\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            \r\n            confirmed:dailyData.confirmed.total,\r\n            deaths:dailyData.deaths.total,\r\n            date:dailyData.reportDate,\r\n\r\n        }))\r\n\r\n        return modifiedData\r\n        \r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchCountries = async() =>{\r\n    try {\r\n\r\n        const {data : {countries}} = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name)\r\n        \r\n    } catch (error) {\r\n        \r\n    }\r\n}","import React, {useState, useEffect} from \"react\"\r\nimport {fetchDalyData} from './../../Api'\r\nimport {Line, Bar} from 'react-chartjs-2'\r\nimport {Card, CardContent, Typography, Grid, Container, StylesProvider} from '@material-ui/core';\r\n\r\nimport styles from './Chart.module.css'\r\n\r\nconst Chart = ({data:{confirmed, recovered, deaths}, country}) =>{\r\n\r\n    const [dailyData, setDailyData] = useState([])\r\n\r\n    useEffect(() =>{\r\n        const fetchApi = async () =>{\r\n            setDailyData(await fetchDalyData())\r\n        }\r\n        fetchApi();\r\n    }, [])\r\n    const lineChart = (\r\n        dailyData.length ?(\r\n            <Line \r\n                data={{\r\n                    labels:dailyData.map(({date}) =>date), \r\n                    datasets:[{\r\n                        data:dailyData.map(({confirmed}) =>confirmed),\r\n                        label:\"Infected\",\r\n                        borderColor:\"rgba(0, 0, 255, 0.5)\",\r\n                        fill:true\r\n                    }, {\r\n                        data:dailyData.map(({deaths}) =>deaths),\r\n                        label:\"Deaths\",\r\n                        borderColor:\"red\",\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                        fill:true\r\n                    }]\r\n\r\n                }}\r\n            />\r\n        ):null\r\n    );\r\n\r\n    console.log(confirmed, recovered, deaths)\r\n    const barChart = (\r\n        confirmed ?(\r\n            <Bar \r\n                data={{\r\n                    labels:['Infected', 'Recoverd', 'deaths'],\r\n                    datasets:[{\r\n                        label:\"People\",\r\n                        backgroundColor:[\r\n                            'rgba(2,0,36, 1)',\r\n                            'rgba(5,122,40)', \r\n                            'rgba(255, 0, 0, 0.8)'\r\n                        ],\r\n                        data:[confirmed.value, recovered.value, deaths.value],\r\n                    }]\r\n\r\n                }}\r\n\r\n                options={{\r\n                    legend:{display:false},\r\n                    title:{disply:true, text:`Current state in ${country}` }\r\n\r\n                }}\r\n            />\r\n        ):null\r\n    );\r\n    return(\r\n        <Container>\r\n            <div className={styles.container}>\r\n                {country ? barChart : lineChart}\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Chart","import React, {useState, useEffect} from \"react\"\r\nimport {NativeSelect, FormControl, Container} from \"@material-ui/core\"\r\nimport styles from './CountryPicker.module.css'\r\nimport {fetchCountries} from './../../Api'\r\n\r\n\r\nconst CountryPicker = ({handleCountryChange}) =>{\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([])\r\n\r\n    useEffect(() =>{\r\n        const fetchCountryApi = async () =>{\r\n            setFetchedCountries(await fetchCountries())\r\n\r\n        }\r\n        fetchCountryApi()\r\n    }, [setFetchedCountries])\r\n\r\n    // console.log(fetchedCountries)\r\n    return(\r\n        <div className={styles.container}>\r\n            <Container>\r\n                <FormControl className={styles.formControl} md={12}>\r\n                    <NativeSelect defaultChecked=\"\" onChange={(e) =>handleCountryChange(e.target.value)}>\r\n                        <option style={{color:\"#fff\"}} value=\"\">Global</option>\r\n                        {fetchedCountries.map((country,i) => <option key={i} value={country}>{country}</option>)}\r\n                    </NativeSelect>\r\n                </FormControl>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryPicker","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Cards from './component/Cards/Cards'\nimport Chart from './component/Chart/Chart'\nimport CountryPicker from './component/CountryPicker/CountryPicker'\nimport {fetchData} from './Api'\n\nimport coronaImage from './imagees/cvdup2.png'\nclass App extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      data : {},\n      country:''\n\n    }\n  }\n  async componentDidMount(){\n    const fetchedData = await fetchData()\n\n    this.setState({data:fetchedData})\n  }\n\n  handleCountryChange = async (country) =>{\n    const fetchedData = await fetchData(country)\n    this.setState({data:fetchedData, country:country})\n    console.log(fetchedData)\n  }\nrender(){\n  const {data, country} = this.state\n    return (\n      <div className=\"container\">\n        <img src={coronaImage} className=\"image\" alt=\"corona Label\"/>\n        <Cards apidata={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    );    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CountryPicker_container__3E96g\",\"formControl\":\"CountryPicker_formControl__2JeFH\",\"countrypik\":\"CountryPicker_countrypik__29PE8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Cards_card__UFr6e\",\"infected\":\"Cards_infected__1ajnm\",\"recoverd\":\"Cards_recoverd__iZFcy\",\"deaths\":\"Cards_deaths__3cB7b\",\"deaths_color\":\"Cards_deaths_color__22Ajn\",\"infected_color\":\"Cards_infected_color__uioQV\",\"recoverd_color\":\"Cards_recoverd_color__3-etU\",\"sihalafont\":\"Cards_sihalafont__3pfr8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1eN0W\"};","module.exports = __webpack_public_path__ + \"static/media/cvdup2.ec7fb0bc.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}